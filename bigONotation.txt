Big-O Notation Practice
In this exercise, you’ll analyze expressions and code to figure out the time complexity.
Part One: Simplifying Expressions
Simplify the following big O expressions as much as possible:
	1.	O(n + 10)
	⁃	O(n)
	2.	O(100 * n)
	⁃	O(n)
	3.	O(25)
	⁃	O(1)
	4.	O(n^2 + n^3)
	⁃	O(n^3)
	5.	O(n + n + n + n)
	⁃	O(n)
	6.	O(1000 * log(n) + n)
	⁃	O(n)
	7.	O(1000 * n * log(n) + n)
	⁃	O(n * log(n))
	8.	O(2^n + n^2)
	⁃	O(2^n)
	9.	O(5 + 3 + 1)
	⁃	O(1)
	10.	O(n + n^(1/2) + n^2 + n * log(n)^10)
	⁃	O(n^2)

Part Two: Calculating Time Complexity
Determine the time complexities for each of the following functions. If you’re not sure what these functions do, copy and paste them into the console and experiment with different inputs!
1. logUpTo(n) —> O(n)
2. logAtLeast10(n) —> O(n)
3. logAtMost10(n) —> O(1)
4. onlyElementsAtEvenIndex(array) —> O(n)
5. subtotals(array) —> O(n^2)
6. vowelCount(str) —> O(n)

Part 3 - short answer
Answer the following questions
	1.	True or false: n^2 + n is O(n^2). —> true
	2.	True or false: n^2 * n is O(n^3). —> true
	3.	True or false: n^2 + n is O(n). —> false
	4.	What’s the time complexity of the .indexOf array method? —> O(n)
	5.	What’s the time complexity of the .includes array method? —> O(n)
	6.	What’s the time complexity of the .forEach array method? —> O(n), but it can vary depending on the callback
	7.	What’s the time complexity of the .sort array method? —> O(log(n))
	8.	What’s the time complexity of the .unshift array method? —> O(n)
	9.	What’s the time complexity of the .push array method? —> O(1)
	10.	What’s the time complexity of the .splice array method? —> O(n)
	11.	What’s the time complexity of the .pop array method? —> O(1)
	12.	What’s the time complexity of the Object.keys() function? —> O(n)
