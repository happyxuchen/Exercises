{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-BoldOblique;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset0 SourceCodePro-Bold;\f4\fnil\fcharset0 SourceCodePro-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red0\green0\blue0;\red85\green142\blue40;
\red13\green95\blue24;\red83\green83\blue83;\red29\green111\blue63;\red51\green109\blue125;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\csgray\c0\c0;\cssrgb\c39975\c61335\c20601;
\cssrgb\c0\c43922\c12549;\cssrgb\c40000\c40000\c40000;\cssrgb\c12549\c50196\c31373;\cssrgb\c25098\c50196\c56471;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{hyphen\}}{\leveltext\leveltemplateid2\'01\uc0\u8259 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\i\b\fs48 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 let
\f1\i0 \'a0and\'a0
\f0\i const
\f1\i0 \'a0Exercise\
\pard\pardeftab720\sa240\partightenfactor0

\f2\b0\fs24 \cf2 In this exercise, you\'92ll refactor some ES5 code into ES2015.\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf2 ES5 Global Constants\
\pard\pardeftab720\partightenfactor0

\f3\fs28\fsmilli14400 \cf4 \strokec5 var
\f4\b0 \strokec2  PI \strokec6 =\strokec2  \strokec7 3.14\strokec2 ;\
PI \strokec6 =\strokec2  \strokec7 42\strokec2 ; \strokec8 // stop me from doing this!\cf2 \strokec2 \
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf2 ES2015 Global Constants\
\pard\pardeftab720\partightenfactor0

\f4\b0\fs28\fsmilli14400 \cf4 \strokec8 /* Write an ES2015 Version */\cf2 \
const PI = 3.14;\
\pard\pardeftab720\partightenfactor0
\cf2 \strokec2 PI = 42 // will throw an error\
\
\pard\pardeftab720\sa298\partightenfactor0

\f1\b\fs36 \cf2 Quiz\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa120\partightenfactor0
\ls1\ilvl0
\f2\b0\fs24 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What is the difference between\'a0
\f0\i\b var
\f2\i0\b0 \'a0and\'a0
\f0\i\b let
\f2\i0\b0 ?\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa120\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8259 	}Var can be redeclared but let cannot, and var has function scope but let has block scope.\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa120\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What is the difference between\'a0
\f0\i\b var
\f2\i0\b0 \'a0and\'a0
\f0\i\b const
\f2\i0\b0 ?\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa120\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8259 	}Const can be neither redeclared nor reassigned, but you can do both with var. Const has block scope and var has function scope.\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa120\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What is the difference between\'a0
\f0\i\b let
\f2\i0\b0 \'a0and\'a0
\f0\i\b const
\f2\i0\b0 ?\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa120\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8259 	}Let can be reassigned, but const cannot be. \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sa120\partightenfactor0
\ls1\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 What is hoisting?\
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\sa120\partightenfactor0
\ls1\ilvl1\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8259 	}Hoisting has to do with how code is compiled. With var, declarations are compiled before the variable is initialized, so we have access to the variable in its undefined state before it is initialized. Variables declared with let are not hoisted, but can be declared before they are initialized, whereas with const, they must be initialized when they are declared.\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
}